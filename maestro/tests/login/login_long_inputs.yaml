# Test ID: LOGIN-LONG-INPUTS-001
# Description: Verify login form validation for long email and password inputs
# Preconditions: User is on the login screen
# Expected Results:
#   - System displays appropriate error message for email that's too long
#   - Form prevents submission with invalid long email format
#   - User remains on the login screen with form still functional
# Tags: [regression, authentication, validation]
# Test configuration
appId: com.kapil.jain.boltexponativewind
name: Login with long input validation
tags: [regression, authentication, validation]
---

# Load POM
- runScript: 
    file: ../../elements/login.js

# Launch the app
- runFlow: "_common/launch_app.yaml"

# Verify login screen elements are visible
- runFlow: "_common/verify_login_screen.yaml"

# Generate test data with long email and password
- runScript: _common/generate_long_string.js

# Verify the script generated the long strings
- assertNotEqual: 
    actual: "${output.longEmail}"
    expected: ""
- assertNotEqual:
    actual: "${output.longPassword}"
    expected: ""

# Fill in credentials with the generated long strings
- runFlow: 
    file: "_common/fill_credentials.yaml"
    env:
      LOGIN_EMAIL: "${output.longEmail}"
      LOGIN_PASSWORD: "${output.longPassword}"

# Submit login form
- runFlow: "_common/submit_login.yaml"

# Wait for the validation to complete
- waitForAnimationToEnd

# Verify that the email validation error is shown (long input should be flagged as invalid)
- assertVisible:
    id: "email-input-error"
    text: "Local part of email must be 64 characters or less"

# Verify we're still on the login screen and form is still functional
- assertVisible: "${output.login.signInButton}"
- assertVisible: "${output.login.emailInput}"
- assertVisible: "${output.login.passwordInput}"

# Verify the login button is still enabled for correction
- assertVisible:
    id: "${output.login.signInButton}"
    enabled: true
