# Test ID: LOGIN-INVALID-CREDENTIALS-001
# Description: Verify login with incorrect credentials shows appropriate error
# Preconditions: User is on the login screen
# Expected Results: 
#   - System displays error message for invalid credentials
#   - User remains on the login screen
#   - Login form is still accessible for retry
# Tags: [regression, authentication, security]
# Test configuration
appId: com.kapil.jain.boltexponativewind
name: Login with incorrect credentials
tags: [regression, authentication, security]
---

# Load POM and test data
- runScript: 
    file: ../../elements/login.js
- runScript: 
    file: "../../config/testdata.js"

# Launch the app
- runFlow: "_common/launch_app.yaml"

# Verify login screen elements are visible
- runFlow: "_common/verify_login_screen.yaml"

# Get invalid credentials from test data
- runScript: |
    output.invalidCreds = output.testData.invalidCredentials.wrongPassword

# Fill in incorrect credentials
- runFlow:
    file: "_common/fill_credentials.yaml"
    env:
      LOGIN_EMAIL: "${output.invalidCreds.email}"
      LOGIN_PASSWORD: "${output.invalidCreds.password}"

# Submit login form
- runFlow: "_common/submit_login.yaml"

# Wait for the login attempt to complete
- waitForAnimationToEnd

# Verify the error alert is shown
- assertVisible:
    text: "Login Failed"
    id: "alert-title"
- assertVisible:
    text: "${output.invalidCreds.expectedError}"
    id: "alert-message"

# Dismiss the alert
- tapOn:
    text: "OK"
    id: "alert-button"

# Verify we're still on the login screen and form is still functional
- assertVisible: "${output.login.signInButton}"
- assertVisible: "${output.login.emailInput}"
- assertVisible: "${output.login.passwordInput}"

# Verify the login button is still enabled for retry
- assertVisible:
    id: "${output.login.signInButton}"
    enabled: true
