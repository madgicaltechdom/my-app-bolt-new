# Test ID: LOGIN-INVALID-EMAIL-001
# Description: Verify login form validation for invalid email format
# Preconditions: User is on the login screen
# Expected Results: System displays appropriate error message for invalid email format
# Tags: [regression, authentication, validation]
# Test configuration
appId: com.kapil.jain.boltexponativewind
name: Login with invalid email format
tags: [regression, authentication, validation]
---

# Load POM and test data
- runScript: 
    file: ../../elements/login.js
- runScript: 
    file: "../../config/testdata.js"

# Launch the app
- runFlow: "_common/launch_app.yaml"

# Verify login screen elements are visible
- runFlow: "_common/verify_login_screen.yaml"

# Get invalid email test data
- runScript: |
    output.invalidEmailCreds = output.testData.invalidCredentials.malformedEmail

# Fill in credentials with invalid email
- runFlow: 
    file: "_common/fill_credentials.yaml"
    env:
      LOGIN_EMAIL: "${output.invalidEmailCreds.email}"
      LOGIN_PASSWORD: "${output.invalidEmailCreds.password}"

# Submit login form
- runFlow: "_common/submit_login.yaml"

# Wait for the validation to complete
- waitForAnimationToEnd

# Verify the email validation error is shown
- assertVisible:
    id: "email-input-error"
    text: "${output.invalidEmailCreds.expectedError}"

# Verify we're still on the login screen
- assertVisible: "${output.login.signInButton}"

# Verify the login button is still enabled (allows user to correct the error)
- assertVisible:
    id: "${output.login.signInButton}"
    enabled: true
